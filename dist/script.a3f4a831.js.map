{"version":3,"sources":["script.js"],"names":["imageContainer","document","querySelector","loader","isInitialLoad","ready","imagesLoaded","totalImages","photosArray","initCount","apiKey","apiURL","updateAPIURLWithNewCount","picCount","imageLoaded","hidden","setAttributes","element","attributes","key","setAttribute","displayPhotos","arr","length","forEach","photo","links","html","urls","regular","description","item","createElement","href","target","img","src","alt","title","addEventListener","appendChild","getPhotos","url","response","fetch","json","error","console","log","window","innerHeight","scrollY","body","offsetHeight"],"mappings":";AACA,MAAMA,EAAiBC,SAASC,cAAc,oBACxCC,EAASF,SAASC,cAAc,WAEtC,IAAIE,GAAgB,EAChBC,GAAQ,EACRC,EAAe,EACfC,EAAc,EACdC,EAAc,GAGlB,MAAMC,EAAY,EACZC,EAAN,8CACA,IAAIC,uDAA8DD,YAElE,SAASE,EAAyBC,GAChCF,uDAA8DD,WAAgBG,IAIhF,SAASC,KACPR,GAAgB,KACKC,IACnBF,GAAQ,EACRF,EAAOY,QAAS,GAKpB,SAASC,EAAcC,EAASC,GAEzB,IAAA,MAAMC,KAAOD,EAChBD,EAAQG,aAAaD,EAAKD,EAAWC,IAKzC,SAASE,EAAcC,GACrBhB,EAAe,EACfC,EAAce,EAAIC,OAElBD,EAAIE,QAASC,IACL,MACJC,OAAO,KAAEC,GACTC,MAAM,QAAEC,GAFJ,YAGJC,GACEL,EAGEM,EAAO9B,SAAS+B,cAAc,KAGpChB,EAAce,EAAM,CAClBE,KAAMN,EACNO,OAAQ,WAIJC,MAAAA,EAAMlC,SAAS+B,cAAc,OAInChB,EAAcmB,EAAK,CACjBC,IAAKP,EACLQ,IAAKP,GAAe,oCACpBQ,MAAOR,GAAe,sCAIxBK,EAAII,iBAAiB,OAAQzB,GAG7BiB,EAAKS,YAAYL,GACjBnC,EAAewC,YAAYT,KAK/B,eAAeU,EAAUC,GACnB,IACIC,MAAAA,QAAiBC,MAAMF,GAE7BrB,EADAb,QAAoBmC,EAASE,QAGzBzC,IACFQ,EAAyB,IACzBR,GAAgB,GAElB,MAAO0C,GACPC,QAAQC,IAAI,wBAAyBF,IAKzCG,OAAOV,iBAAiB,SAAU,KAE9BU,OAAOC,YAAcD,OAAOE,SAAWlD,SAASmD,KAAKC,aAAe,KACpEhD,IAEAA,GAAQ,EACRoC,EAAU9B,MAKd8B,EAAU9B","file":"script.a3f4a831.js","sourceRoot":"..","sourcesContent":["/* eslint-disable guard-for-in */\nconst imageContainer = document.querySelector('#image-container');\nconst loader = document.querySelector('#loader');\n\nlet isInitialLoad = true;\nlet ready = false;\nlet imagesLoaded = 0;\nlet totalImages = 0;\nlet photosArray = [];\n\n// Unsplash API\nconst initCount = 5;\nconst apiKey = process.env.UNSPLASH_API_KEY;\nlet apiURL = `https://api.unsplash.com/photos/random/?client_id=${apiKey}&count=${initCount}`;\n\nfunction updateAPIURLWithNewCount(picCount) {\n  apiURL = `https://api.unsplash.com/photos/random/?client_id=${apiKey}&count=${picCount}`;\n}\n\n// Check if all images were loaded\nfunction imageLoaded() {\n  imagesLoaded += 1;\n  if (imagesLoaded === totalImages) {\n    ready = true;\n    loader.hidden = true;\n  }\n}\n\n// Helper Function to Set Attributes on DOM Elements\nfunction setAttributes(element, attributes) {\n  // eslint-disable-next-line no-restricted-syntax\n  for (const key in attributes) {\n    element.setAttribute(key, attributes[key]);\n  }\n}\n\n// Create Elements for Links & Photos, add to DOM\nfunction displayPhotos(arr) {\n  imagesLoaded = 0;\n  totalImages = arr.length;\n\n  arr.forEach((photo) => {\n    const {\n      links: { html },\n      urls: { regular },\n      description,\n    } = photo;\n\n    // Create <a> to link to Unsplash\n    const item = document.createElement('a');\n    // item.setAttribute('href', html);\n    // item.setAttribute('target', '_blank');\n    setAttributes(item, {\n      href: html,\n      target: '_blank',\n    });\n\n    // Create <img> for photo\n    const img = document.createElement('img');\n    // img.setAttribute('src', regular);\n    // img.setAttribute('alt', description);\n    // img.setAttribute('title', description);\n    setAttributes(img, {\n      src: regular,\n      alt: description || 'This pictures has no description!',\n      title: description || 'This pictures has no description!',\n    });\n\n    // Event Listener, check when each is finished loading\n    img.addEventListener('load', imageLoaded);\n\n    // Put <img> inside <a>, then put both inside imageContainer Element\n    item.appendChild(img);\n    imageContainer.appendChild(item);\n  });\n}\n\n// Get photos from Unsplash API\nasync function getPhotos(url) {\n  try {\n    const response = await fetch(url);\n    photosArray = await response.json();\n    displayPhotos(photosArray);\n\n    if (isInitialLoad) {\n      updateAPIURLWithNewCount(30);\n      isInitialLoad = false;\n    }\n  } catch (error) {\n    console.log('Error fething photos:', error);\n  }\n}\n\n// Check to see if scrolling near bottom of page, Load More Photos\nwindow.addEventListener('scroll', () => {\n  if (\n    window.innerHeight + window.scrollY >= document.body.offsetHeight - 1000 &&\n    ready\n  ) {\n    ready = false;\n    getPhotos(apiURL);\n  }\n});\n\n// On Load\ngetPhotos(apiURL);\n"]}